# -*- coding: utf-8 -*-
"""App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10DdBaIWopjK-LTeWxgTqT2ov6ZYZj1dr
"""

import streamlit as st
import pickle
import pandas as pd
import numpy as np
import sklearn
# Load the pre-trained Gradient Boosting model
# Make sure 'gb_model.pkl' is in the same folder as this script
try:
    with open('gb_model.pkl', 'rb') as file:
        model = pickle.load(file)
except FileNotFoundError:
    st.error("Model file not found. Please make sure 'gb_model.pkl' is in the same folder.")
    st.stop()

# --- Page Configuration ---
st.set_page_config(
    page_title="Mobile Price Predictor",
    page_icon="ðŸ“±",
    layout="centered"
)

# --- UI Elements ---
st.title("ðŸ“± Mobile Phone Price Predictor")
st.write("Enter the specifications of a mobile phone to predict its launch price in USD and other currencies.")

st.header("Phone Specifications")

# Create columns for a cleaner layout
col1, col2 = st.columns(2)

with col1:
    ram = st.slider("RAM (GB)", min_value=2, max_value=16, value=8, step=2)
    mobile_weight = st.slider("Mobile Weight (grams)", min_value=100, max_value=250, value=190, step=5)
    front_camera = st.number_input("Front Camera (MP)", min_value=5, max_value=64, value=16, step=1)

with col2:
    battery = st.slider("Battery (mAh)", min_value=2000, max_value=7000, value=4500, step=100)
    screen_size = st.slider("Screen Size (inches)", min_value=5.0, max_value=7.0, value=6.5, step=0.1)
    back_camera = st.number_input("Back Camera (MP)", min_value=8, max_value=200, value=108, step=4)

# Launch Year is a single column element
launch_year = st.selectbox("Launch Year", options=[2023, 2024, 2025], index=1)

# --- Prediction Logic ---
if st.button("Predict Price", type="primary"):
    # Create a DataFrame from the user's input
    # The order of columns MUST match the order used for training the model
    input_data = pd.DataFrame({
        'Mobile Weight': [mobile_weight],
        'RAM': [ram],
        'Front Camera': [front_camera],
        'Back Camera': [back_camera],
        'Battery': [battery],
        'Screen Size': [screen_size],
        'Launch Year': [launch_year]
        # Make sure to add any other features your model was trained on, in the correct order.
        # For example, if you had a 'Brand' feature, you would add it here.
    })

    st.write("---")
    st.header("Prediction Results")

    # Make the prediction
    predicted_price_usd = model.predict(input_data)[0]

    # Display the primary prediction in USD
    st.success(f"**Predicted Price in USA (USD): ${predicted_price_usd:,.2f}**")

    # --- Currency Conversions ---
    # These are approximate exchange rates. You can update them as needed.
    exchange_rates = {
        "Pakistan (PKR)": 280,
        "India (INR)": 83.50,
        "China (CNY)": 7.25,
        "Dubai (AED)": 3.67
    }

    st.subheader("Price Estimates in Other Currencies")

    col3, col4 = st.columns(2)
    with col3:
        price_pkr = predicted_price_usd * exchange_rates["Pakistan (PKR)"]
        st.metric(label="ðŸ‡µðŸ‡° Pakistan (PKR)", value=f"Rs. {price_pkr:,.2f}")

        price_cny = predicted_price_usd * exchange_rates["China (CNY)"]
        st.metric(label="ðŸ‡¨ðŸ‡³ China (CNY)", value=f"Â¥ {price_cny:,.2f}")

    with col4:
        price_inr = predicted_price_usd * exchange_rates["India (INR)"]
        st.metric(label="ðŸ‡®ðŸ‡³ India (INR)", value=f"â‚¹ {price_inr:,.2f}")

        price_aed = predicted_price_usd * exchange_rates["Dubai (AED)"]
        st.metric(label="ðŸ‡¦ðŸ‡ª Dubai (AED)", value=f"Dhs. {price_aed:,.2f}")

st.markdown("""
    ---
    *Disclaimer: This is a machine learning prediction and should be used for estimation purposes only.*
""")
